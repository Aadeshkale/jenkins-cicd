// for dependency tracker needs OWASP Dependency-Check Plugin
// for multibranch webhook needs Multibranch Scan Webhook Trigger
// for multibranch to keep file in diffrent repo https://plugins.jenkins.io/remote-file/
pipeline{
    agent any

    stages{ 

        stage("System-ENVS") {
            steps{
                sh 'printenv | sort'
            }
        }

        stage("Set variables according to env"){
            steps{
                script{
                    if (env.GIT_BRANCH == 'main'){
                        
                        app_name =  'web-app-prod'
                        artifactory = 'webapp/prod'
                        server = 'prod-server'
                    
                    }
                    if (env.GIT_BRANCH == 'dev'){
                        
                        app_name =  'web-app-dev'
                        artifactory = 'webapp/dev'
                        server = 'dev-server'
                    
                    }

                }

            }

        }

        stage('Dependancy tracker check'){
            steps{
                script{
                    dependencyCheck additionalArguments: ''' --scan ./web-app''', odcInstallation: 'Dep-checkk'
                    dependencyCheckPublisher failedTotalCritical: 1, pattern: '', stopBuild: true, unstableTotalCritical: 1
                }
            }
        }

       // need to setup sonarqube plugins,connector,server,project and project-key
       stage('SonarQube Analysis') {
          steps{      
              script{
                 def scannerHome = tool name: 'scanner-name', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                 withSonarQubeEnv('sonar') {
                        sh "echo $pwd"
                        
                        sh "${scannerHome}/bin/sonar-scanner \
                            -D sonar.projectKey=py-scan \
                            -D sonar.sourceEncoding=UTF-8 \
                            -D sonar.language=python "
                            // -D sonar.host.url=http://<URL>:9000"
                        // sh "${scannerHome}/bin/sonar-scanner"
                     
                 }

                  
              }
          }
        }
        
        
       // Need to create webhook in sonarqube 
       stage("SonarQube Quality Gate Check") {
            steps {
                script {
                def qualityGate = waitForQualityGate()
                    
                    if (qualityGate.status != 'OK') {
                        echo "${qualityGate.status}"
                        error "Quality Gate failed: ${qualityGateStatus}"
                    }
                    else {
                        echo "${qualityGate.status}"
                        echo "SonarQube Quality Gates Passed"
                    }
                }
            }
        } 


        stage('Build Image'){
            steps{
                script{
                    docker.build ("${app_name}:${env.BUILD_ID}", "./web-app") 
                }
            }
        }
        stage('Push Image to artifactory'){
            steps{
                script{
                     sh """
                        echo 'Image pushed to:${artifactory}'
                     """
                    //  sh "echo Image pushed to:${artifactory}"
                }
            }
        }
        stage('Deployment app'){
            steps{
                script{
                    if (env.GIT_BRANCH == 'main'){
                        input message: 'Please chech and approve for prod deployment', submitter: 'admin', submitterParameter: 'apporve_by_admin'
                        sh """ 
                            echo 'Application Deployed TO:${server}'
                        """    
                    }    
                    else{
                        sh """ 
                            echo 'Application Deployed TO:${server}'
                        """
                    }
                    
                }
            }
        }

    }   
    
    post{
        always{
            cleanWs()
            sh "docker system prune -f -a"     
        }
    
    }

}
